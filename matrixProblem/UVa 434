i#include <bits/stdc++.h>
using namespace std;
 
#define fR(i, a, b) for (int i = (a); i < (b); i++)
#define fRD(i, a, b) for (int i = (a); i > (b); i--)
#define fRJ(i, a, b, j) for (int i = (a), i < (b); i += j)
#define fRJD(i, a, b, j) for (int i = (a), i > (b); i -= j)
#define fL(i, n) for (int i = 0; i < (n); i++)    
 
#define pb push_back
#define F first
#define S second
#define all(v) (v).begin(), (v).end()
#define fast_io ios::sync_with_stdio(false); cin.tie(nullptr);
#define debug(x) cout << '>' << #x << ": " << x << endl;
#define printMap(mp) for(auto &it: mp) cout<<" ("<<it.F<<"-> "<<it.S<<")"<<endl;
#define printVector(v) for(auto &it: v) cout<<it<<" ";
#define printMatrix(v) for(auto &it: v) { for(auto &i: it) { cout<<i<<" "; cout<<endl;}}
#define rV(v) reverse(all(v));
#define cinV(v) for(auto &it: v) cin>>it;
 
typedef long long int ll;
typedef unsigned long long int ull;
typedef long double ld;

typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;
typedef vector<ll> vll;
typedef vector<vi> vvi;
typedef vector<vll> vvll;
typedef vector<pii> vpii;
typedef vector<pll> vpll;
typedef set<int> si;
typedef map<int, int> mii;

vector<string> tokenize(string &str){    
    vector <string> tokens;
    stringstream check1(str);
     
    string intermediate;
    while(getline(check1, intermediate, ' '))
    {
        tokens.push_back(intermediate);
    }
    return tokens;
}

class MattysBlocks {
private:
    int k;
    vector<int> front, right;

public:
    MattysBlocks(int n): k(n){
        front.resize(n);
        right.resize(n);
        cinV(front);
        cinV(right);

    }
    
    int calculateMinBlocks() {
        int minPieces = 0;
        vector<bool> frontUsed(k, false);
        vector<bool> rightUsed(k, false);

        // Optimal pairing of equal values
        for (int i = 0; i < k; ++i) {
            for (int j = 0; j < k; ++j) {
                if (front[i] == right[j] && !frontUsed[i] && !rightUsed[j]) {
                    minPieces += front[i];
                    frontUsed[i] = true;
                    rightUsed[j] = true;
                }
            }
        }

        // Add unmatched front values
        for (int i = 0; i < k; ++i) {
            if (!frontUsed[i]) minPieces += front[i];
        }

        // Add unmatched right values
        for (int i = 0; i < k; ++i) {
            if (!rightUsed[i]) minPieces += right[i];
        }

        return minPieces;
    }

    int calculateMaxExtraBlocks(int minPieces) {
        int totalMaxBlocks = 0;
        for (int i = 0; i < k; ++i) {
            for (int j = 0; j < k; ++j) {
                totalMaxBlocks += min(front[j], right[i]);
            }
        }
        return totalMaxBlocks - minPieces;
    }

    void solveTestCase() {
        int minBlocks = calculateMinBlocks();
        int maxExtra = calculateMaxExtraBlocks(minBlocks);
        cout << "Matty needs at least " << minBlocks << " blocks, and can add at most " << maxExtra << " extra blocks.\n";
    }
};

int main(){
 
    fast_io;
 
    #ifndef ONLINE_JUDGE
        freopen("input.txt",  "r",  stdin);
        freopen("output.txt", "w", stdout);
    #endif
 
    int testCases;
    cin >> testCases;

    while (testCases--) {
        int dimension;
        cin>>dimension;
        MattysBlocks mb(dimension);
        mb.solveTestCase();
    } 
    return 0;
}
